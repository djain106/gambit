[{"G:\\Learning MERN\\Gamble\\gamble\\src\\index.js":"1","G:\\Learning MERN\\Gamble\\gamble\\src\\reportWebVitals.js":"2","G:\\Learning MERN\\Gamble\\gamble\\src\\App.js":"3","G:\\Learning MERN\\Gamble\\gamble\\src\\app_bar\\TopBar.js":"4","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\NavSwitch.js":"5","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\login\\Login.js":"6","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\home\\Home.js":"7","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\registration\\Register.js":"8","G:\\Learning MERN\\Gamble\\gamble\\src\\services\\axios.js":"9","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\contexts\\user-context.js":"10","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\contexts\\auth-context.js":"11","G:\\Learning MERN\\Gamble\\gamble\\src\\app_bar\\components\\LoginLogout.js":"12","G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\useDetectOutsideClick.js":"13","G:\\Learning MERN\\Gamble\\gamble\\src\\app_bar\\components\\NavMenu.js":"14","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\blackjack\\Blackjack.js":"15","G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\validUser.js":"16","G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\validCookie.js":"17","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\blackjack\\Card.js":"18","G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\updateBalance.js":"19","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\roulette\\Roulette.js":"20","G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\roulette\\RouletteWheel.js":"21"},{"size":595,"mtime":1609059005765,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":2195,"mtime":1609306739874,"results":"25","hashOfConfig":"23"},{"size":1393,"mtime":1609384705837,"results":"26","hashOfConfig":"23"},{"size":1121,"mtime":1609799102348,"results":"27","hashOfConfig":"23"},{"size":2383,"mtime":1609385520454,"results":"28","hashOfConfig":"23"},{"size":238,"mtime":1609269021792,"results":"29","hashOfConfig":"23"},{"size":4121,"mtime":1609791433314,"results":"30","hashOfConfig":"23"},{"size":735,"mtime":1609436428174,"results":"31","hashOfConfig":"23"},{"size":200,"mtime":1609234292531,"results":"32","hashOfConfig":"23"},{"size":211,"mtime":1609235513557,"results":"33","hashOfConfig":"23"},{"size":1584,"mtime":1609385432527,"results":"34","hashOfConfig":"23"},{"size":912,"mtime":1609310605089,"results":"35","hashOfConfig":"23"},{"size":1276,"mtime":1609384305790,"results":"36","hashOfConfig":"23"},{"size":7164,"mtime":1609563815360,"results":"37","hashOfConfig":"23"},{"size":147,"mtime":1609385426822,"results":"38","hashOfConfig":"23"},{"size":91,"mtime":1609385834244,"results":"39","hashOfConfig":"23"},{"size":572,"mtime":1609791433314,"results":"40","hashOfConfig":"23"},{"size":343,"mtime":1609448155441,"results":"41","hashOfConfig":"23"},{"size":281,"mtime":1609797547999,"results":"42","hashOfConfig":"23"},{"size":872,"mtime":1609808244451,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1a0f0on",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\Learning MERN\\Gamble\\gamble\\src\\index.js",[],["88","89"],"G:\\Learning MERN\\Gamble\\gamble\\src\\reportWebVitals.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\App.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\app_bar\\TopBar.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\NavSwitch.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\login\\Login.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\home\\Home.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\registration\\Register.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\services\\axios.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\contexts\\user-context.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\contexts\\auth-context.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\app_bar\\components\\LoginLogout.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\useDetectOutsideClick.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\app_bar\\components\\NavMenu.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\blackjack\\Blackjack.js",["90","91"],"import React, { useEffect, useState } from 'react'\r\nimport { useUser } from '../contexts/user-context'\r\nimport { useHistory } from 'react-router-dom';\r\nimport validUser from '../../helpers/validUser';\r\nimport Card from './Card'\r\nimport './Blackjack.css'\r\nimport jsonDeck from './deck.json'\r\nimport { Button } from 'react-bootstrap';\r\nimport updateBalance from '../../helpers/updateBalance.js'\r\n\r\nfunction Blackjack() {\r\n    // Enums\r\n    const Gamestate = {\r\n        BETTING: \"betting\",\r\n        USER: \"userTurn\",\r\n        DEALER: \"dealerTurn\",\r\n        DONE: \"done\",\r\n    }\r\n\r\n    // Variables\r\n    const data = JSON.parse(JSON.stringify(jsonDeck.cards));\r\n    const faceCards = ['K', 'Q', 'J'];\r\n    const { user, setUser } = useUser();\r\n    const [dealerValue, setDealerValue] = useState(0);\r\n    const [playerValue, setPlayerValue] = useState(0);\r\n    const [deck, setDeck] = useState(data);\r\n    const [betAmount, setBetAmount] = useState(1);\r\n    const [gamestate, setGamestate] = useState(Gamestate.BETTING);\r\n    const [playerCards, setPlayerCards] = useState([]);\r\n    const [dealerCards, setDealerCards] = useState([]);\r\n    const [winner, setWinner] = useState(\"\");\r\n\r\n    // Functions\r\n    useEffect(() => {\r\n        function fixBet() {\r\n            if (betAmount < 0) {\r\n                setBetAmount(-1 * Math.trunc(betAmount))\r\n            } else if (betAmount > user.balance && gamestate === Gamestate.BETTING) {\r\n                setBetAmount(Math.trunc(user.balance));\r\n            }\r\n        };\r\n        fixBet()\r\n        return () => { }\r\n    }, [betAmount])\r\n\r\n    function pickCards(count) {\r\n        const cards = [];\r\n        for (var i = 0; i < count; i++) {\r\n            var index = Math.floor(Math.random() * deck.length);\r\n            var card = deck[index];\r\n            card[\"hidden\"] = false;\r\n            var newDeck = deck;\r\n            newDeck.splice(index, 1);\r\n            setDeck(newDeck);\r\n            cards.push(card);\r\n        }\r\n        return cards\r\n    }\r\n\r\n    function calculateValue(cards) {\r\n        var value = 0;\r\n        var aces = 0;\r\n        cards.forEach((card) => {\r\n            if (card.value === 'A')\r\n                aces += 1;\r\n            else\r\n                value += getCardValue(card.value);\r\n        });\r\n        if (value + aces >= 21 || aces === 0) {\r\n            return value + aces\r\n        }\r\n\r\n        while (value + 11 <= 21 && aces === 1) {\r\n            aces -= 1\r\n            value += 11\r\n        }\r\n\r\n        return value + aces\r\n    }\r\n\r\n    function getCardValue(value) {\r\n        if (faceCards.includes(value)) {\r\n            return 10\r\n        } else {\r\n            return parseInt(value);\r\n        }\r\n    }\r\n\r\n    async function dealCards() {\r\n        setGamestate(Gamestate.USER);\r\n        const updatedUser = await updateBalance(-1 * betAmount);\r\n        setUser(updatedUser);\r\n        const pCards = pickCards(2);\r\n        setPlayerCards(pCards);\r\n        setPlayerValue(calculateValue(pCards));\r\n        var dCards = pickCards(2);\r\n        dCards[1].hidden = true;\r\n        setDealerCards(dCards);\r\n        setDealerValue(calculateValue([dCards[0]]));\r\n    }\r\n\r\n    function hit(cards) {\r\n        var newCard = pickCards(1);\r\n        cards.push(newCard[0]);\r\n        const value = calculateValue(cards);\r\n        setPlayerCards(cards);\r\n        setPlayerValue(value);\r\n        if (value >= 21) {\r\n            playDealer();\r\n        }\r\n    }\r\n\r\n    function playDealer() {\r\n        setGamestate(Gamestate.DEALER);\r\n        var cards = dealerCards;\r\n        cards.forEach((card) => card.hidden = false)\r\n        var value = calculateValue(cards);\r\n        while (value < 17) {\r\n            var newCard = pickCards(1)[0];\r\n            cards.push(newCard);\r\n            value = calculateValue(cards);\r\n        }\r\n\r\n        setDealerCards(cards);\r\n        setDealerValue(value);\r\n        calculateWinner(value)\r\n    }\r\n\r\n    async function calculateWinner(value) {\r\n        if (playerValue > 21) {\r\n            setWinner(': Bust');\r\n        } else if (playerValue === value) {\r\n            setWinner(': Draw');\r\n            const updatedUser = await updateBalance(betAmount);\r\n            setUser(updatedUser);\r\n        } else if (value < 22 && value > playerValue) {\r\n            setWinner(': Dealer Wins');\r\n        } else {\r\n            setWinner(': Player Wins!');\r\n            const updatedUser = await updateBalance(2 * betAmount);\r\n            setUser(updatedUser);\r\n        }\r\n        setGamestate(Gamestate.DONE);\r\n    }\r\n\r\n    async function reset(changeBet) {\r\n        setDeck(data);\r\n        setDealerValue(0);\r\n        setPlayerValue(0);\r\n        setPlayerCards([]);\r\n        setDealerCards([]);\r\n        setWinner(\"\");\r\n        setGamestate(Gamestate.BETTING);\r\n        if (changeBet || user.balance === 0) {\r\n            setBetAmount(0);\r\n        } else {\r\n            setBetAmount(Math.min(user.balance, betAmount));\r\n        }\r\n    }\r\n\r\n    // Renders\r\n    if (!validUser(user)) {\r\n        return (\r\n            <div className=\"border\">\r\n                <h2>Please <a href=\"/login\">login</a> to continue.</h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"border\">\r\n            <div className=\"gameboard\">\r\n                <h2>BlackJack {winner}</h2>\r\n                <h4 hidden={gamestate === Gamestate.BETTING}>Dealer's Hand ({dealerValue})</h4>\r\n                <div className=\"card-spot\">\r\n                    {dealerCards.map((card, index) =>\r\n                        <Card key={index} value={card.value} suit={card.suit} hidden={card.hidden} />)}\r\n                </div>\r\n                <div className=\"card-spot\">\r\n                    {playerCards.map((card, index) =>\r\n                        <Card key={index} value={card.value} suit={card.suit} hidden={card.hidden} />)}\r\n                </div>\r\n                <h4 hidden={gamestate === Gamestate.BETTING}>Your Hand ({playerValue})</h4>\r\n                <h4 hidden={gamestate !== Gamestate.BETTING}>Current Balance: {user.balance}</h4>\r\n                <div className=\"buttons\">\r\n                    <label><b>Bet Amount</b></label>\r\n                    <input type=\"number\" min={1} max={user.balance} pattern=\"\\d+\" value={betAmount} onChange={(e) => setBetAmount(e.target.value)} disabled={gamestate !== Gamestate.BETTING} />\r\n                    <Button onClick={() => dealCards()} hidden={gamestate !== Gamestate.BETTING} disabled={betAmount <= 0}>Bet</Button>\r\n                    <Button onClick={() => hit(playerCards)} disabled={gamestate !== Gamestate.USER} hidden={gamestate !== Gamestate.USER}>Hit</Button>\r\n                    <Button onClick={() => playDealer()} disabled={gamestate !== Gamestate.USER} hidden={gamestate !== Gamestate.USER}>Stand</Button>\r\n                    <Button onClick={() => reset(true)} disabled={gamestate !== Gamestate.DONE} hidden={gamestate !== Gamestate.DONE}>Change Bet</Button>\r\n                    <Button onClick={() => reset(false)} disabled={gamestate !== Gamestate.DONE} hidden={gamestate !== Gamestate.DONE}>Redo Bet</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blackjack\r\n","G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\validUser.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\validCookie.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\blackjack\\Card.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\helpers\\updateBalance.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\roulette\\Roulette.js",[],"G:\\Learning MERN\\Gamble\\gamble\\src\\pages\\roulette\\RouletteWheel.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":20},{"ruleId":"100","severity":1,"message":"101","line":44,"column":8,"nodeType":"102","endLine":44,"endColumn":19,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Gamestate.BETTING', 'gamestate', and 'user.balance'. Either include them or remove the dependency array.","ArrayExpression",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [Gamestate.BETTING, betAmount, gamestate, user.balance]",{"range":"109","text":"110"},[1564,1575],"[Gamestate.BETTING, betAmount, gamestate, user.balance]"]